# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sc5-serverless-messenger-bot # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Scan
      - dynamodb:Query
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can overwrite defaults here
#defaults:
#  stage: dev
#  region: us-east-1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  facebookBot: 
    handler: facebook-bot/handler.handler
    events:
      - http:
          path: facebook-bot
          method: get
          response:
            headers:
              Content-Type: "'text/html'"
            template: $input.path('$.response')
      - http:
          path: facebook-bot 
          method: post
  
#    you can add any of the following events
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env.BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

# you can add CloudFormation resource templates here

resources: 
  Resources:
    SessionsTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: id
            AttributeType: S
        KeySchema: 
          - 
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-sessions-${opt:stage, self:provider.stage}
#  Outputs:
#    SessionsTable:
#      Description: Session table for Messenger bot
#      Value: TODO: define output value
plugins:
  - serverless-offline
  - serverless-mocha-plugin

# TODO: webpack